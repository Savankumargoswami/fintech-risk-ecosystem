version: '3.8'

services:
  # Main Application
  fintech-api:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile
    container_name: fintech-risk-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://fintech_user:fintech_pass@postgres:5432/fintech_risk
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URL=bolt://neo4j:7687
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - neo4j
      - kafka
    volumes:
      - ../../models:/app/models
      - ../../logs:/app/logs
    networks:
      - fintech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Time Series Data)
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: fintech-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=fintech_risk
      - POSTGRES_USER=fintech_user
      - POSTGRES_PASSWORD=fintech_pass
      - TIMESCALEDB_TELEMETRY=off
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/init-timescale.sql:/docker-entrypoint-initdb.d/init-timescale.sql
    networks:
      - fintech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fintech_user -d fintech_risk"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (Caching and Real-time Data)
  redis:
    image: redis:7-alpine
    container_name: fintech-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - fintech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Neo4j (Graph Database for Market Relationships)
  neo4j:
    image: neo4j:5-community
    container_name: fintech-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/fintech_neo4j_pass
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - fintech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "fintech_neo4j_pass", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka (Message Streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fintech-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - fintech-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fintech-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - fintech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Flink (Stream Processing)
  flink-jobmanager:
    image: flink:1.17-scala_2.12
    container_name: fintech-flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
    volumes:
      - ../../streaming/flink_jobs:/opt/flink/jobs
    networks:
      - fintech-network
    restart: unless-stopped

  flink-taskmanager:
    image: flink:1.17-scala_2.12
    container_name: fintech-flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
    volumes:
      - ../../streaming/flink_jobs:/opt/flink/jobs
    networks:
      - fintech-network
    restart: unless-stopped

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: fintech-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - fintech-network
    restart: unless-stopped

  # Grafana (Monitoring Dashboards)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: fintech-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=fintech_admin_pass
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fintech-network
    restart: unless-stopped

  # Elasticsearch (Log Aggregation)
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: fintech-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - fintech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana (Log Visualization)
  kibana:
    image: kibana:8.8.0
    container_name: fintech-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - fintech-network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: fintech-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ../../web/dist:/usr/share/nginx/html
    depends_on:
      - fintech-api
    networks:
      - fintech-network
    restart: unless-stopped

  # ML Training Worker (Optional)
  ml-worker:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.worker
    container_name: fintech-ml-worker
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://fintech_user:fintech_pass@postgres:5432/fintech_risk
    depends_on:
      - redis
      - postgres
    volumes:
      - ../../models:/app/models
      - ../../data:/app/data
    networks:
      - fintech-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  fintech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
